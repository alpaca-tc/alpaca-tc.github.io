{"pageProps":{"post":{"id":"2021-05-08-active-record-bitmask","title":"ActiveRecordでbitmaskを扱う","date":"2021-05-07 20:00","content":"<p>ActiveRecordでbitmaskを扱うgemを数年前に書きました。<br>\n<a href=\"https://github.com/alpaca-tc/active_record_bitmask\">alpaca-tc/active_record_bitmask</a></p>\n<p>ぼちぼちデキはいいんですが、今まで宣伝し忘れて居たので紹介します。</p>\n<h2>bitmaskを扱えると何が嬉しいのか</h2>\n<p>bitmaskを利用すると、複数の値を1カラムで表現することができます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token operator\">&#x3C;</span> <span class=\"token constant\">ApplicationRecord</span>\n  <span class=\"token comment\"># rolesはintのカラム</span>\n  <span class=\"token comment\">#</span>\n  <span class=\"token comment\"># 下記の例では{ administrator: 1, provider: 2, guest: 4 } にマッピングされる</span>\n  bitmask<span class=\"token punctuation\">(</span>roles<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token symbol\">:administrator</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:provider</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:guest</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\"># administrator = 1, guest = 4なので 合計値は5となる</span>\nuser <span class=\"token operator\">=</span> <span class=\"token constant\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>roles<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token symbol\">:administrator</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:guest</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nuser<span class=\"token punctuation\">.</span>save<span class=\"token operator\">!</span> <span class=\"token comment\">#=> DBのrolesには 5 が記録される</span>\nuser<span class=\"token punctuation\">.</span>roles <span class=\"token comment\">#=> [:administrator, :guest]</span>\n\nuser<span class=\"token punctuation\">.</span>roles<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token symbol\">:administrator</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#=> true</span>\nuser<span class=\"token punctuation\">.</span>roles<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token symbol\">:guest</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#=> true</span>\nuser<span class=\"token punctuation\">.</span>roles<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span><span class=\"token symbol\">:provider</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#=> false</span>\n</code></pre></div>\n<h2>既存gem(bitmask_attributes)との比較</h2>\n<p>すでにメンテナンスされていないですが、<a href=\"https://github.com/joelmoss/bitmask_attributes\">joelmoss/bitmask_attributes</a>というgemがありました。</p>\n<p>このgemも同様の機能を提供していたのですが、いくつか気になる点がありました。</p>\n<ul>\n<li>コード読み込み時にカラム情報を取得するので、DBが存在していないと即エラーになる</li>\n<li>ビットマスクのカラムへのクエリが数式で実行されるため、indexを利用できない</li>\n</ul>\n<p>なにより、メンテナンスされていないので利用には不安がありました。</p>\n<h3>indexを使うための工夫</h3>\n<p>bitmask_attributesでは、検索時に <code>where(\"column &#x26; ? > 0\", value)</code> のようなクエリを発行していました。これでは計算が必要なのでindexを利用することはできません。</p>\n<p>active_record_bitmaskは、これを解決するためにクエリを発行する前に、対象となる値を算出することにしました。<br>\n例えば、マッピングが<code>{ administrator: 1, provider: 2, guest: 4 }</code> であれば、<code>administrator: 1</code>を含む可能性のあるbitmask値は <code>[1, 3, 5, 7]</code> のいずれかになることが明らかです。\nこのように、あらかじめ算出した値をwhere句に渡すことで、インデックスを利用してbitmaskカラムを扱えるようにしました。</p>\n<h2>おわりに</h2>\n<p>利用シーンとしては、権限や機能制限のフラグなどの管理がやりやすいです。\n後から新しい値を追加した時にも、わざわざカラムを追加せず済んでいいですよ。</p>\n<p>ぜひお使いください。</p>","rawContent":"\nActiveRecordでbitmaskを扱うgemを数年前に書きました。  \n[alpaca-tc/active_record_bitmask](https://github.com/alpaca-tc/active_record_bitmask)\n\nぼちぼちデキはいいんですが、今まで宣伝し忘れて居たので紹介します。\n\n## bitmaskを扱えると何が嬉しいのか\n\nbitmaskを利用すると、複数の値を1カラムで表現することができます。\n\n```ruby\nclass User < ApplicationRecord\n  # rolesはintのカラム\n  #\n  # 下記の例では{ administrator: 1, provider: 2, guest: 4 } にマッピングされる\n  bitmask(roles: [:administrator, :provider, :guest])\nend\n\n# administrator = 1, guest = 4なので 合計値は5となる\nuser = User.new(roles: [:administrator, :guest])\nuser.save! #=> DBのrolesには 5 が記録される\nuser.roles #=> [:administrator, :guest]\n\nuser.roles?(:administrator) #=> true\nuser.roles?(:guest) #=> true\nuser.roles?(:provider) #=> false\n```\n\n## 既存gem(bitmask_attributes)との比較\n\nすでにメンテナンスされていないですが、[joelmoss/bitmask_attributes](https://github.com/joelmoss/bitmask_attributes)というgemがありました。\n\nこのgemも同様の機能を提供していたのですが、いくつか気になる点がありました。\n\n- コード読み込み時にカラム情報を取得するので、DBが存在していないと即エラーになる\n- ビットマスクのカラムへのクエリが数式で実行されるため、indexを利用できない\n\nなにより、メンテナンスされていないので利用には不安がありました。\n\n### indexを使うための工夫\n\nbitmask\\_attributesでは、検索時に `where(\"column & ? > 0\", value)` のようなクエリを発行していました。これでは計算が必要なのでindexを利用することはできません。\n\nactive\\_record\\_bitmaskは、これを解決するためにクエリを発行する前に、対象となる値を算出することにしました。  \n例えば、マッピングが`{ administrator: 1, provider: 2, guest: 4 }` であれば、`administrator: 1`を含む可能性のあるbitmask値は `[1, 3, 5, 7]` のいずれかになることが明らかです。 \nこのように、あらかじめ算出した値をwhere句に渡すことで、インデックスを利用してbitmaskカラムを扱えるようにしました。\n\n## おわりに\n\n利用シーンとしては、権限や機能制限のフラグなどの管理がやりやすいです。\n後から新しい値を追加した時にも、わざわざカラムを追加せず済んでいいですよ。\n\nぜひお使いください。\n"},"prevPost":null,"nextPost":{"id":"2021-05-07-generated-og-image","title":"nextjsの静的配信ブログで自前生成のogimageを配信する","date":"2021-05-07 20:00"}},"__N_SSG":true}