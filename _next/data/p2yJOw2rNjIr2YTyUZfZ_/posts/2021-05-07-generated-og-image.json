{"pageProps":{"post":{"id":"2021-05-07-generated-og-image","title":"nextjsの静的配信ブログで自前生成のogimageを配信する","date":"2021-05-07 20:00","content":"<p>og-imageってなんだっけというと、記事をシェアする際に画面に表示されるコレです。</p>\n<img class=\"image_on_frame center\" src=\"https://opengraph.githubassets.com/0a2f84a49c6dded83bcddc8e522ca657eccedcb932ac44fa89733e8a6afeb8ee/alpaca-tc/alpaca-tc.github.io/pull/7\" alt=\"参考のog-image\" />\n<p>zenn.devといいGitHubといい、最近はコンテンツの内容を元に動的に生成されたリッチなog-imageが増えてきました。</p>\n<p>この記事では、流行りのog-image生成方法をおさらいしつつ、このブログが採用したやり方を紹介します。</p>\n<h2>og-image生成の主流</h2>\n<p>最近よく見るog-imageの生成方法は、og-imageを生成するマイクロサービスを立てて、動的に画像を生成するやり方です。</p>\n<p><a href=\"https://og-image.vercel.app/hello_world.png\" target=\"_blank\">https://og-image.vercel.app/hello_world.png</a></p>\n<p>例えば、上のURLを開くとパスの <code>hello_world</code> の部分をテキストに変換してこんな画像を生成してくれます。</p>\n<img class=\"image_on_frame center\" src=\"https://og-image.vercel.app/hello_world.png\" alt=\"hello_world\" />\n<p>なので、あとはURLをmetaに追記するだけでog-imageの対応が完了します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>twitter:img:src<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://og-image.vercel.app/hello_world.png<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<p>このやり方は、URLを指定するだけでog-imageを作ることができるので楽ちんです。</p>\n<h2>og-imageを自前で生成する</h2>\n<p>このブログはNext.jsで書かれており、<code>next export</code> で出力したHTMLをgithub pagesで配信しています。\n先ほど紹介したようなマイクロサービスのやり方だと、管理するhostが増えるのでgithub pagesの旨味がなくなります。</p>\n<p>そこで、このブログでは古典的なデプロイ時にog-imageを生成する戦略を取りました。</p>\n<h3>どうやってog-imageを生成しているか</h3>\n<p>このブログではheadless Chromeの<a href=\"https://github.com/puppeteer/puppeteer\">puppeteer</a>を使っています。</p>\n<p>いい感じにスタイルをあてたHTMLをChromeに喰わせて、レンダリングされた画面をpngに変換する画像生成を行っています。\n下記のように、HTMLを生成する処理と、HTMLからpngに変換する処理を実行することで、簡単に画像生成ができます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> core <span class=\"token keyword\">from</span> <span class=\"token string\">'puppeteer-core'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> fs <span class=\"token keyword\">from</span> <span class=\"token string\">'fs'</span>\n\n<span class=\"token keyword\">const</span> executablePath <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>platform <span class=\"token operator\">===</span> <span class=\"token string\">'win32'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe'</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>platform <span class=\"token operator\">===</span> <span class=\"token string\">'linux'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'/usr/bin/google-chrome'</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'/Applications/Google Chrome.app/Contents/MacOS/Google Chrome'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> browser <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> core<span class=\"token punctuation\">.</span><span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>\n  args<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  executablePath<span class=\"token punctuation\">,</span>\n  headless<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> page <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> browser<span class=\"token punctuation\">.</span><span class=\"token function\">newPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> width <span class=\"token operator\">=</span> <span class=\"token number\">1200</span>\n<span class=\"token keyword\">const</span> height <span class=\"token operator\">=</span> <span class=\"token number\">626</span>\n\n<span class=\"token keyword\">const</span> getScreenshot <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>html<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'png'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&#x3C;</span>Buffer<span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> page <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span><span class=\"token function\">setViewport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> width<span class=\"token punctuation\">,</span> height <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span><span class=\"token function\">setContent</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span><span class=\"token function\">screenshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> file <span class=\"token keyword\">as</span> Buffer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> generateHtml <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// サンプルコードなので省略</span>\n  <span class=\"token comment\">// ここではCSSは&#x3C;style>に埋め込んで、og-imageのデザインをHTMLで表現する</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"token string\">    &#x3C;!DOCTYPE html></span>\n<span class=\"token string\">    &#x3C;html></span>\n<span class=\"token string\">      &#x3C;head>...&#x3C;/head></span>\n<span class=\"token string\">      &#x3C;body>...&#x3C;/body></span>\n<span class=\"token string\">    &#x3C;/html></span>\n<span class=\"token string\">  </span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span>\n\ntitles<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> title <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> html <span class=\"token operator\">=</span> <span class=\"token function\">generateHtml</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> buf <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getScreenshot</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">await</span> fs<span class=\"token punctuation\">.</span>promises<span class=\"token punctuation\">.</span><span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">public/og-images/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.png</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token string\">'ascii'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>あとはこれを実行すれば、og-imageの出来上がりです。\nそれっぽい画像を作ることができました。</p>\n<img class=\"image_on_frame center\" src=\"/og-images/2021-05-06-generated-og-images.png\" alt=\"nextjsの静的配信ブログでog-imageを配信する\" />\n<p>なお、いくつか細かい処理を省略しているので、実際の処理についてはgithubを見てください\n<a href=\"https://github.com/alpaca-tc/alpaca-tc.github.io/blob/master/scripts/generate_og_image.ts\">alpaca-tc/alpaca-tc.github.io</a></p>\n<h2>感想</h2>\n<p>今回自前で処理を書くにあたって、世の中のマイクロサービスを眺めてみたんですが、どれも似たようなものでした。\nこの処理をマイクロサービスに移せば、og-imageの動的生成もできるので、案外そんなものだったのかと思いました。</p>","rawContent":"\nog-imageってなんだっけというと、記事をシェアする際に画面に表示されるコレです。\n\n<img class=\"image_on_frame center\" src=\"https://opengraph.githubassets.com/0a2f84a49c6dded83bcddc8e522ca657eccedcb932ac44fa89733e8a6afeb8ee/alpaca-tc/alpaca-tc.github.io/pull/7\" alt=\"参考のog-image\" />\n\nzenn.devといいGitHubといい、最近はコンテンツの内容を元に動的に生成されたリッチなog-imageが増えてきました。\n\nこの記事では、流行りのog-image生成方法をおさらいしつつ、このブログが採用したやり方を紹介します。\n\n## og-image生成の主流\n\n最近よく見るog-imageの生成方法は、og-imageを生成するマイクロサービスを立てて、動的に画像を生成するやり方です。\n\n<a href=\"https://og-image.vercel.app/hello_world.png\" target=\"_blank\">https://og-image.vercel.app/hello_world.png</a>\n\n例えば、上のURLを開くとパスの `hello_world` の部分をテキストに変換してこんな画像を生成してくれます。\n\n<img class=\"image_on_frame center\" src=\"https://og-image.vercel.app/hello_world.png\" alt=\"hello_world\" />\n\nなので、あとはURLをmetaに追記するだけでog-imageの対応が完了します。\n\n```html\n<meta name=\"twitter:img:src\" content=\"https://og-image.vercel.app/hello_world.png\">\n```\n\nこのやり方は、URLを指定するだけでog-imageを作ることができるので楽ちんです。\n\n## og-imageを自前で生成する\n\nこのブログはNext.jsで書かれており、`next export` で出力したHTMLをgithub pagesで配信しています。\n先ほど紹介したようなマイクロサービスのやり方だと、管理するhostが増えるのでgithub pagesの旨味がなくなります。\n\nそこで、このブログでは古典的なデプロイ時にog-imageを生成する戦略を取りました。\n\n### どうやってog-imageを生成しているか\n\nこのブログではheadless Chromeの[puppeteer](https://github.com/puppeteer/puppeteer)を使っています。\n\nいい感じにスタイルをあてたHTMLをChromeに喰わせて、レンダリングされた画面をpngに変換する画像生成を行っています。\n下記のように、HTMLを生成する処理と、HTMLからpngに変換する処理を実行することで、簡単に画像生成ができます。\n\n```typescript\nimport core from 'puppeteer-core';\nimport fs from 'fs'\n\nconst executablePath = (() => {\n  if (process.platform === 'win32') {\n    return 'C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe'\n  } else if (process.platform === 'linux') {\n    return '/usr/bin/google-chrome'\n  } else {\n    return '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome';\n  }\n})()\n\nconst browser = await core.launch(\n  args: [],\n  executablePath,\n  headless: true\n)\nconst page = await browser.newPage();\n\nconst width = 1200\nconst height = 626\n\nconst getScreenshot = async (html: string, type: string = 'png'): Promise<Buffer> => {\n  const page = await getPage();\n\n  await page.setViewport({ width, height });\n  await page.setContent(html);\n\n  const file = await page.screenshot({ type });\n\n  return file as Buffer;\n}\n\nconst generateHtml = (title: string): string => {\n  // サンプルコードなので省略\n  // ここではCSSは<style>に埋め込んで、og-imageのデザインをHTMLで表現する\n  return `\n    <!DOCTYPE html>\n    <html>\n      <head>...</head>\n      <body>...</body>\n    </html>\n  `\n}\n\ntitles.forEach(async ({ title }) => {\n  const html = generateHtml(title)\n  const buf = await getScreenshot(html)\n  await fs.promises.writeFile(`public/og-images/${title}.png`, buf, 'ascii')\n})\n```\n\nあとはこれを実行すれば、og-imageの出来上がりです。\nそれっぽい画像を作ることができました。\n\n<img class=\"image_on_frame center\" src=\"/og-images/2021-05-06-generated-og-images.png\" alt=\"nextjsの静的配信ブログでog-imageを配信する\" />\n\nなお、いくつか細かい処理を省略しているので、実際の処理についてはgithubを見てください\n[alpaca-tc/alpaca-tc.github.io](https://github.com/alpaca-tc/alpaca-tc.github.io/blob/master/scripts/generate_og_image.ts)\n\n## 感想\n\n今回自前で処理を書くにあたって、世の中のマイクロサービスを眺めてみたんですが、どれも似たようなものでした。\nこの処理をマイクロサービスに移せば、og-imageの動的生成もできるので、案外そんなものだったのかと思いました。\n"},"prevPost":{"id":"2021-05-08-active-record-bitmask","title":"ActiveRecordでbitmaskを扱う","date":"2021-05-07 20:00"},"nextPost":{"id":"2021-05-05-childcare-supplies","title":"育児のために買ってよかったもの(乳幼児~幼児編)","date":"2021-05-05 20:00"}},"__N_SSG":true}