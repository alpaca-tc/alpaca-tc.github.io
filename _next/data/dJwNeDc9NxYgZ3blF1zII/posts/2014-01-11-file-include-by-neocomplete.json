{"pageProps":{"post":{"id":"2014-01-11-file-include-by-neocomplete","title":"neocomplete.vimのfile_includeを使いこなす","date":"2014-01-11 13:25","content":"<p>この記事は<a href=\"https://atnd.org/events/45072\">Vim Advent Calendar 2013</a>の42日目の記事になります。</p>\n<h1>Neocomplete.vimのfile_includeを使いこなす</h1>\n<p>さて、今回の記事ではneocompleteのfile_includeを使いこなしてみます。</p>\n<img class=\"image_on_frame center\" src=\"/images/blog/file-include-by-neocomplete/completion_capture.png\" alt=\"neocomplete_file_include\" />\n<!-- more -->\n<p>file_includeとは、ファイルパスを補完してくれるアレです。file補完との違いは、特定のキーワードや変換を含んだ補完が出来る点です。</p>\n<ol>\n<li>キーワード(<code>require</code>や<code>#include</code>)があると補完が始まり</li>\n<li>指定されたパスの中から候補を探し、変換して表示します。(例:<code>system.os</code>)</li>\n</ol>\n<p>内部では、path, include, includeexprなどが使われています。(pathの参考 -> <a href=\"/blog/vim/jump-to-gem-path.html\">Vim中級者を脱する Path編</a>)</p>\n<h2>neocompleteを拡張する</h2>\n<p>file_includeを拡張する際には、neocompleteの設定をしてあげる必要があります。それぞれ、次のように5つ変数をファイルタイプ毎に設定します。</p>\n<p>指定しなければ、デフォルトの部分の変数が使用されます</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">&#x26;quot; Liquidで画像pathを補完する\n\n&#x26;quot; デフォルト &#x26;amp;l:path(検索対象のディレクトリ`,`区切り)\nlet g:neocomplete#sources#include#paths.liquid =\n  \\ &#x26;#39;/Users/alpaca-tc/projects/alpaca-tc.github.io/source&#x26;#39;\n\n&#x26;quot; デフォルト &#x26;amp;l:include(正規表現にマッチしたら補完を開始)\nlet g:neocomplete#sources#include#patterns.liquid =\n  \\ &#x26;#39;\\({\\s*%\\(\\s\\+\\w\\+\\)\\+\\(\\s*\\|\\s\\+[a-zA-Z0-9_#\\?\\!]\\+\\)\\@=\\|{\\s*{\\(\\s\\+\\w\\+\\)\\+\\(\\s*\\|\\s\\+[a-zA-Z0-9_#\\?\\!]\\+\\)\\@=\\)&#x26;#39;\n\n&#x26;quot; デフォルト &#x26;amp;l:includeexpr(ファイルパスを出力する際に変換する)\nlet g:neocomplete#sources#include#exprs.liquid =\n  \\ &#x26;#39;substitute(v:fname, &#x26;quot;^/&#x26;quot;, &#x26;quot;&#x26;quot;, &#x26;quot;&#x26;quot;)&#x26;#39;\n\n&#x26;quot; デフォルト &#x26;#39;.&#x26;#39;(区切り文字の指定)\nlet g:neocomplete#sources#file_include#delimiters.liquid = &#x26;#39;/&#x26;#39;\n\n&#x26;quot; デフォルト [](補完するファイル拡張子フィルター)\nlet g:neocomplete#sources#file_include#exts.liquid =\n  \\ [&#x26;#39;png&#x26;#39;, &#x26;#39;jpg&#x26;#39;, &#x26;#39;gif&#x26;#39;, &#x26;#39;jpeg&#x26;#39;, &#x26;#39;ico&#x26;#39;]</code></pre></div>\n<h2>解説いる？</h2>\n<p>先ほどのコードを読めば、だいたい分かると思います。(あなたがVimmerなら！)</p>\n<p>もし、マイナーな言語でfile_include補完があった方が便利ならば、拡張してみてくださいー。</p>\n<p>あるいは、&#x26;l:include, &#x26;l:includeexprなどで対応出来ているかもしれませんが。neocomplete.vim自体に設定が少ないのはそういうことです、(よね...？)</p>\n<p>個人的には、フレームワーク毎にfile_includeが使いたい所存です。</p>\n<h2>Railsのimage_pathを補完してみる</h2>\n<p>最後です。</p>\n<p>Railsでimage_pathを入力する際に、typoが多いので補完で対応してみます。</p>\n<p>こんな感じで色々対応出来るはずなので、誰か本格的なRails用カスタマイズを作ってみてくれたらうれしいです！</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">&#x26;quot; Rails.vimが必須\nfunction! s:setup_include_file_for_rails()\n  if !exists(&#x26;#39;b:rails_root&#x26;#39;) || !exists(&#x26;#39;g:neocomplete#sources#include#paths&#x26;#39;)\n    return\n  endif\n\n  let g:neocomplete#sources#include#patterns.haml =\n        \\ &#x26;#39;^\\s*\\&#x26;lt;\\%(image_path\\|image_tag\\)\\&#x26;gt;&#x26;#39;\n  let g:neocomplete#sources#include#paths.haml =\n        \\ b:rails_root . &#x26;#39;/app/assets/images&#x26;#39;\n  let g:neocomplete#sources#include#exprs.haml =\n        \\ &#x26;quot;substitute(substitute(v:fname,&#x26;#39;::&#x26;#39;,&#x26;#39;/&#x26;#39;,&#x26;#39;g&#x26;#39;),&#x26;#39;$&#x26;#39;,&#x26;#39;&#x26;#39;,&#x26;#39;&#x26;#39;)&#x26;quot;\n  let g:neocomplete#sources#file_include#exts.haml =\n        \\ [&#x26;#39;png&#x26;#39;, &#x26;#39;jpg&#x26;#39;, &#x26;#39;gif&#x26;#39;, &#x26;#39;jpeg&#x26;#39;, &#x26;#39;ico&#x26;#39;]\n  let g:neocomplete#sources#file_include#delimiters.haml = &#x26;#39;/&#x26;#39;\nendfunction\ncommand! RailsView call s:setup_include_file_for_rails()</code></pre></div>\n<p><strong>うっほい！</strong></p>\n<img class=\"image_on_frame center\" src=\"/images/blog/file-include-by-neocomplete/completion_for_rails_view.png\" alt=\"completion_for_rails_view\" />\n<p>Shougoさんいつもありがとうございます。本当に。</p>\n<p>ちなみに、tpopeさんはこんな感じの事を剛腕で捩じ伏せて実現しています。Vimガチ勢怖い...。</p>\n<h2>Vim Advent Calendar 45</h2>\n<p>前日は@osyo_mangaさんの<a href=\"https://d.hatena.ne.jp/osyo-manga/20140110/1389342122\">textobj の両端へ移動する operator つくった</a>でした。</p>\n<p>は！またosyoさんということは...!? と思っていたら、やはりVim Advent Calendarの今後の投稿者が居ませんでした;(</p>\n<p>このブログを見ているあなた！(特にここまで読み切ったVim狂)</p>\n<p>どうせVimmerしか居ない事は分かっています。<strong>ぜひ書いてください</strong> -> <a href=\"https://twitter.com/manga_osyo\">osyoさん</a>に「記事書きたいですー」とリプライ飛ばしましょうー！</p>"}},"__N_SSG":true}