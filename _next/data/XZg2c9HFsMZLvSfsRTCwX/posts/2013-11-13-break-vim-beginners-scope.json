{"pageProps":{"post":{"id":"2013-11-13-break-vim-beginners-scope","title":"Vim中級者を脱する スコープ編","date":"2013-11-13 17:26","content":"<p>個人的に、Vimで一番ハマったのが<strong>スコープの問題</strong>でした。</p>\n<p>vimrcのコピペばかりの、あなた。</p>\n<p>せめて、よく登場するスコープだけでも理解してみましょう。</p>\n<!-- more -->\n<h1>よく見るスコープ一覧</h1>\n<ul>\n<li><em>グローバル</em>スコープ　<code>g:</code></li>\n<li><em>関数内</em>スコープ　<code>a:</code></li>\n<li><em>スクリプト</em>スコープ　<code>s:</code></li>\n<li><em>バッファ</em>スコープ　<code>b:</code></li>\n<li><em>接頭辞なし</em>　<code>let huga=...</code>など</li>\n</ul>\n<h2>グローバル(g:)スコープ</h2>\n<p><strong>どこからでも参照できます。</strong></p>\n<p>プラグインの設定で見慣れたスコープですね。</p>\n<p><code>let g:neocomplete#enable_at_startup = 1</code></p>\n<p>変数を初期化するには、次のようにします。\n大量のエラーコードによって操作できなくなるので、<strong>嫌いな人のvimrcの末尾に書き込んでください。</strong></p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">for key in keys(g:)\n  execute &#x26;#39;unlet g:&#x26;#39; . key\nendfor</code></pre></div>\n<h2>関数内(a:)スコープ</h2>\n<p><strong>関数内で、引数を参照するときに使用するスコープ</strong></p>\n<p>個人的に一番理解しがたいスコープです。</p>\n<p>こんな感じで使います。他言語から移ってきた人には、正直使いづらい。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">function! Huga(first, second)\n  echo a:first\n  &#x26;quot;=&#x26;gt; &#x26;#39;a&#x26;#39;\n\n  echo a:\n  &#x26;quot;=&#x26;gt; {&#x26;#39;0&#x26;#39;: 0, &#x26;#39;000&#x26;#39;: [], &#x26;#39;second&#x26;#39;: &#x26;#39;b&#x26;#39;, &#x26;#39;first&#x26;#39;: &#x26;#39;a&#x26;#39;, &#x26;#39;firstline&#x26;#39;: 5, &#x26;#39;lastline&#x26;#39;: 5}\nendfunction\n\ncall Huga(&#x26;#39;a&#x26;#39;, &#x26;#39;b&#x26;#39;)</code></pre></div>\n<p>「あーなるほど、<strong>関数内でだけ有効なスコープなのか。</strong>」</p>\n<p>と、思っていたら<em>それは間違い。</em></p>\n<p>下記のようにすると、<strong>グローバルスコープとして参照できます。</strong></p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">function! a:huga()\n  echo &#x26;#39;Global!?!?!?&#x26;#39;\nendfunction\n\ncall a:huga() &#x26;quot; =&#x26;gt; Global!?!?!?</code></pre></div>\n<p>実は、これ関数名に<code>:</code>が許可されているだけです。\nなので実際は<code>a:</code>スコープは関係ないんだけど、分かりづらい。</p>\n<h2>スクリプト(s:)スコープ</h2>\n<p><strong>ファイル内でのみ有効なスコープ</strong>です。</p>\n<p>プラグインで、プライベートなメソッドや定数を作るときによく使います。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">let s:script_scope = &#x26;#39;外部からは参照できない&#x26;#39;\nfunction! s:script_scope_method()\n  &#x26;quot; プライベートメソッドとしてよく使われる\nendfunction</code></pre></div>\n<p>この<code>s:</code>は、スクリプトがsourceされるときに置き換えられ、<code>&#x3C;SNR>1_...</code>という感じの形になります。</p>\n<p>えぇ、そうです。すると、<strong>グローバルなスコープとして参照できます。</strong></p>\n<p>この<code>&#x3C;SNR></code>の後にどの数値が割り振られているかは、<code>:scriptnames</code>で参照できます。</p>\n<p>また、<code>s:</code>は<code>&#x3C;SID></code>として使えばスコープを超えて使用できるようになります。</p>\n<p>マッピングの時に、scriptスコープを使う時などは必須ですね。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">nnoremap s :echo &#x26;lt;SID&#x26;gt;SID()&#x26;lt;CR&#x26;gt;</code></pre></div>\n<p>ただし、<strong>変数は基本的には聖域</strong>です。</p>\n<h2>バッファ(b:)スコープ</h2>\n<p><strong>バッファ単位のスコープ</strong>です。</p>\n<p>ファイルタイプによる設定や、一時バッファによる変数などに使います。</p>\n<ul>\n<li>ファイルタイプの変更で、<code>b:current_syntax</code>などが初期化&#x26;格納されます</li>\n<li>Uniteを起動で、<code>b:unite</code>にデータが格納されます。</li>\n</ul>\n<p>Uniteのデバッグするときには、<code>echo b:unite.candidates</code>などを参照しましょう。</p>\n<p>あぁ、ようやくまともなスコープだ。</p>\n<h2>接頭辞なし(<code>let huga=</code>)変数</h2>\n<p>えぇ。<strong>グローバルなスコープです。</strong></p>\n<p>お前もか！</p>\n<p>マナーとしては、やはり<code>g:</code>で宣言したいところですが、</p>\n<p>Vimにデフォルトで入っているプラグインは、容赦なくこの変数を使ってきます。</p>\n<p><code>:echo loaded_*&#x3C;Tab></code>などすれば、奴らを見つけられるはずです。</p>\n<p>細かいことを言えば、関数内ならばローカルスコープです。。。</p>\n<h2>スコープのまとめ</h2>\n<ul>\n<li>スコープは<strong>ほとんどグローバルで参照できる</strong></li>\n<li>VimLは枠にハマらない<strong>素敵な</strong>言語仕様を持っている</li>\n<li>getbufvar()などでスコープへアクセス出来るため、<strong>聖域はほとんど無い</strong></li>\n</ul>\n<p><strong>正直今でも理解出来ていない。</strong></p>"}},"__N_SSG":true}