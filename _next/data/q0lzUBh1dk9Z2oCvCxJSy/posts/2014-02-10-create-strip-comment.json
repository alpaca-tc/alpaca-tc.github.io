{"pageProps":{"post":{"id":"2014-02-10-create-strip-comment","title":"久しぶりにGemを書いている","date":"2014-02-10 12:33","content":"<p>最近、久しぶりにGemを書いてます。</p>\n<p>去年から<a href=\"https://github.com/nhmood/watson-ruby\">watson-ruby</a>というinline issue manager貢献してます。</p>\n<p>watsonは凄い便利なんですが、コードがかなりアレなのです...。</p>\n<p>「全部リファクタリングさせてくれー！」って言っても、まだやりたい作業があるらしく「ブランチ切るから、もう少し待ってて:)」と言われたっきり...</p>\n<p>うーむ、、なかなか全部は触れないので、とりあえず一番やっかいな部分だけ汎用的にすべく自作しました。</p>\n<!-- more -->\n<h2>どんなGem?</h2>\n<p>あらゆるプログラムソースを読み取って、<strong>コメント行のみを取り出すGem</strong>です。watsonでは、このコメント行を読み取って、todoの管理を行っています。</p>\n<p>最近のwatsonのPRを見ても、対応ファイルの追加(正規表現の追記)ばかりなのです。こんなもの、他のGemにくれてしまえ！</p>\n<p>どんなファイルタイプであれ、扱うのはコメントという概念なのだから、委譲して抽象化しちゃいましょう。</p>\n<h2>何が出来るようになるんだい？</h2>\n<p>あらゆるプログラムのソースコードをパースして、コメント行だけを抽象的に扱う事が出来ます。</p>\n<p>読み取って、何らかの処理をすることが出来ます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\"># 今のところはこんな感じ。</span>\n<span class=\"token comment\"># Gem名やmethod名は変更します</span>\n<span class=\"token keyword\">require</span> <span class=\"token string\">'strip_comment'</span>\n\npath <span class=\"token operator\">=</span> <span class=\"token string\">'/path/to/file'</span>\nfile <span class=\"token operator\">=</span> <span class=\"token constant\">StripComment</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">FileObject</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\nparser <span class=\"token operator\">=</span> <span class=\"token constant\">StripComment</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Parser</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span>\nparser<span class=\"token punctuation\">.</span>scan\nparser<span class=\"token punctuation\">.</span>comments <span class=\"token comment\"># => [StripComment::CodeObject::Comment, ...]</span>\n</code></pre></div>\n<p>簡単に思いつく限りの用途はこんな感じ。</p>\n<ul>\n<li>英語のコメントの文法チェック / 翻訳</li>\n<li><code>[review - @alpaca-tc ここ見ておいて！]</code>というコメントにGit post-hookをかけて、ダイレクトメッセージを送る</li>\n<li>iftttとの連携</li>\n</ul>\n<p>他にも色々出来そうですね。</p>\n<h2>Vimでテスト</h2>\n<p>さっそくVimと連携してみました。</p>\n<img class=\"image_on_frame center\" src=\"/images/blog/create-strip-comment/comment.gif\" alt=\"comment.vimデモ\" />\n<p>コメント行を取り出して、Gingerで文法チェックしています。</p>\n<h2>まとめ</h2>\n<p>あとは対応ファイルを増やして、リファクタリングしたら完成です。\n今<code>StripComment</code>という名前なんだけど、絶対違うよね。(´・ω・｀)良い名前が思いつかない</p>\n<p>終わったら誰か、コードレビューして欲しいなぁ！ヽ(・∀・ )ﾉわーい</p>"},"prevPost":{"id":"2014-02-12-how-to-use-star","title":"ここまで出来る！RubyのSplat Operatorまとめ","date":"2014-02-12 04:16"},"nextPost":{"id":"2014-01-20-gyaku-syuukatsu-2","title":"逆就活へ参加するときのノウハウまとめ 続き","date":"2014-01-20 16:28"}},"__N_SSG":true}