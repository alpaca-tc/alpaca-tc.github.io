{"pageProps":{"post":{"id":"2013-12-13-using-vim-unite-watson","title":"Unite.vimとwatsonを使ったワークフロー","date":"2013-12-13 02:29","content":"<p>最近、vim-unite-watsonを開発しました。</p>\n<p>これが、watsonの作者であるnhmoodさんにも好評で、僕自身ワークフローが変化して、だいぶ作業しやすくなりました。</p>\n<p>今回は、タスク管理をしたい人向けに、僕なりのワークフロー管理を紹介します。</p>\n<!-- more -->\n<h1>ワークフローとVim</h1>\n<p>僕は普段、Webサービスの構築・保守を行う仕事をしています。</p>\n<p>そこでは、基本的なフローは次のような流れです。</p>\n<ol>\n<li>新機能・バグに対してIssueを発行する(あるいは既にTODOリストにある)</li>\n<li>トピックブランチを作る</li>\n<li>コードを書く</li>\n<li>コミット -> Pull-Requestを送る -> マージする</li>\n</ol>\n<p>では、Vimを一度も閉じることなくこれらの作業をしてみます。</p>\n<h2>1. Issueの発行</h2>\n<h3>1-1. TODOをコードに入力する</h3>\n<img class=\"image_on_frame center\" src=\"/images/blog/workflow_1.png\" alt=\"本番環境用にViewを作成すると記入する\" />\n<h3>1-2. IssueをGithubにあげる</h3>\n<p>インラインIssue管理の<a href=\"/blog/ruby/how-to-use-watson.html\">watson</a>を使って、GithubにIssueをあげます</p>\n<img class=\"image_on_frame center\" src=\"/images/blog/workflow_2.png\" alt=\":Watsonのデモ\" />\n<p>Watsonを使えば、Vimから簡単にIssue管理を行うことが出来ますね。</p>\n<h2>2. 作業の目処を立てる</h2>\n<p>さて、これでIssueは挙げられたので、次はコードの改修をしていきます。</p>\n<h3>2-1. トピックブランチを作る</h3>\n<p>ブランチの作業は、<a href=\"https://github.com/alpaca-tc/vim-unite-giti\">vim-unite-giti</a>を使います。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">:Unite giti/branch</code></pre></div>\n<p>新しいブランチの名前を入力して、<code>[checkout branch]</code>の行を選択します。</p>\n<img class=\"image_on_frame center\" src=\"/images/blog/workflow_3.png\" alt=\"Unite gitiのデモ\" />\n<p>すると、新しいブランチが作られました。</p>\n<h3>2-2. コードの改修を行う場所に印をつけて行く</h3>\n<p>コードの改修は、多くの場合幾つかのファイルに跨がります。</p>\n<p>そのため、経験から作業が必要な箇所に目処をつけて、コメントを書いて行きます。</p>\n<img class=\"image_on_frame center\" src=\"/images/blog/workflow_4.png\" alt=\"\" />\n<img class=\"image_on_frame center\" src=\"/images/blog/workflow_5.png\" alt=\"\" />\n<img class=\"image_on_frame center\" src=\"/images/blog/workflow_6.png\" alt=\"\" />\n<p>todoの内容は、watsonによって管理されるので、vim-unite-watsonを使えば一覧としてみることができます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">:Unite watson/dirty</code></pre></div>\n<img class=\"image_on_frame center\" src=\"/images/blog/workflow_7.png\" alt=\"unite-watsonのdemo\" />\n<p>これで、issueを解決するために必要な作業の一覧を自分で作ることが出来ました。</p>\n<p>Unite上のコメントを選択すると、該当箇所に飛べます。</p>\n<p>後は、</p>\n<ol>\n<li>該当箇所に飛ぶ</li>\n<li>コードを修正する</li>\n<li>解決したら、コメントを削除する</li>\n</ol>\n<p>を<code>:Unite watson/dirty</code>が空になるまで繰り返します。</p>\n<p>watsonの結果リストが空になれば、issueの問題を解決したことになり、次の作業に移ります。</p>\n<h3>3. GithubにPull-Requestする</h3>\n<p>これは、各々方法が分かれるかと思います。</p>\n<p>Vimから出ないでPull-Requestを送るには、<code>:!git push</code> &#x26;&#x26; <code>:!hub pull-request -h ...</code>というのが一番分かりやすいでしょうか。</p>\n<p>僕は、<code>:Unite giti/pull_request</code>で送るようにしています。</p>\n<h2>まとめ</h2>\n<p>Watsonやgitiはかなり便利です。</p>\n<p>特に、watsonはコーディング作業をマネジメントしたい人に向いていると思います。\n作業時間の見積もりや、タスク管理を考えながらコーディングする人には向いているプラグインなのではないでしょうか。</p>\n<p>僕は経営学部にいるので、すっかりタスク管理や時間計測を気にしちゃうようになりました。。</p>\n<p><strong>今回紹介したプラグイン</strong></p>\n<ul>\n<li><a href=\"https://github.com/alpaca-tc/vim-unite-watson.vim\">vim-unite-watson</a></li>\n<li><a href=\"https://github.com/kmnk/vim-unite-giti\">vim-unite-giti (本家)</a></li>\n<li><a href=\"https://github.com/alpaca-tc/vim-unite-giti\">vim-unite-giti (giti/pull_request追加版)</a></li>\n</ul>"},"prevPost":{"id":"2013-12-16-ruby-class-variable","title":"Rubyのクラス変数について詰まったのでヘルプ","date":"2013-12-16 01:10"},"nextPost":{"id":"2013-12-09-neocomplete-vs-youcompleteme","title":"NeoComplete vs YouCompleteMe","date":"2013-12-10 00:04"}},"__N_SSG":true}