{"pageProps":{"post":{"id":"2014-02-13-i-have-almost-finished-implementing-comment-parser","title":"Gemを書くときに知っておきたい3つの事","date":"2014-02-18 20:52","content":"<p>先日から書き続けていた<a href=\"https://github.com/alpaca-tc/comment_extractor\">CommentExtractor</a>が、大枠完成しました。</p>\n<img class=\"image_on_frame center\" src=\"/images/blog/i-have-almost-finished-implementing-comment-parser/capture.png\" alt=\"CommentExtractor\" />\n<p>さて、今回Gemを書くときに役に立った、便利なTipsを幾つか紹介します！</p>\n<!-- more -->\n<p>内容はバラバラです。笑</p>\n<ol>\n<li>READMEに視覚情報を追加する</li>\n<li>RubyGemsからGemを削除する</li>\n<li>RSpecをキレイに書く</li>\n</ol>\n<h2>1.READMEに視覚情報を追加する</h2>\n<p>READMEには視覚的なバッヂを追加出来ます。Gemを書くときには、ぜひとも入れておきたい情報ですね。</p>\n<ul>\n<li><a href=\"https://badge.fury.io/rb/comment_extractor\"><img src=\"https://badge.fury.io/rb/comment_extractor.png\" alt=\"Gem Version\"></a></li>\n<li><a href=\"https://travis-ci.org/alpaca-tc/comment_parser\"><img src=\"https://travis-ci.org/alpaca-tc/comment_extractor.png?branch=v1.0.0\" alt=\"Build Status\"></a></li>\n<li><a href=\"https://coveralls.io/r/alpaca-tc/comment_extractor?branch=v1.0.0\"><img src=\"https://coveralls.io/repos/alpaca-tc/comment_extractor/badge.png?branch=v1.0.0\" alt=\"Coverage Status\"></a></li>\n</ul>\n<p>もちろん、登録すれば無料で作ることが出来ます。</p>\n<p>詳しくは<a href=\"https://elgalu.github.io/2013/add-achievement-badges-to-your-gem-readme/\">コチラの記事</a>を読んでみましょう。</p>\n<h2>2.RubyGemsからGemを削除する</h2>\n<p>間違えてRubyGemsにPushしてしまった！</p>\n<p>そんなときに便利なyankコマンド。意外と知られていない。</p>\n<div class=\"remark-highlight\"><pre class=\"language-sh\"><code class=\"language-sh\">gem yank gem_name <span class=\"token parameter variable\">-v</span> <span class=\"token number\">1.0</span>.0\n</code></pre></div>\n<p>ただ、これをやっても論理削除されるだけのようですねぇ。多分。</p>\n<p>このバージョン使うなよ！新しいの使えよ！ってときに使うコマンドだと思います。</p>\n<h2>3.RSpecをキレイに書く</h2>\n<p>RSpecをキレイに書く方法は、ある程度伝統があります。</p>\n<ul>\n<li><a href=\"https://betterspecs.org/\">BetterSpecs</a></li>\n<li><a href=\"https://bitfluxx.com/2011/05/23/some-rspec-tips-and-best-practices.html\">Some RSpec Tips and Best Practices</a></li>\n</ul>\n<p>今回は、ある程度RSpecを書ける人向けに、検索してもあまり出てこない情報(検索しにくい？)を提供したいと思います。</p>\n<h3>Syntaxについて</h3>\n<h4>be_truthy, be_falsy</h4>\n<p>RSpecが新しくなって、<code>be_true</code>, <code>be_false</code>→<code>be_truthy</code>, <code>be_falsy</code>となりました。\n今までは、厳密に<code>true</code>で無くてもテストが通っちゃいましたからね。</p>\n<h4>現在の主題であるクラスを取得する</h4>\n<p>RSpecでは<code>described_class</code>というメソッドを使用出来ます。\n<code>describe KlassName do...</code>で指定したKlassNameが格納されます。</p>\n<p>これを使えば、クラス名に依存せずにテストを書く事ができますね。</p>\n<h4>ExampleGroupを作る</h4>\n<p>ご存知の通り、Railsのテストではcontroller, model, viewで使えるメソッドが大きく異なります。\nそれは、RSpecのexample_groupという機能を使って、テストの種類を元にModuleをincludeしているからです。</p>\n<p>これを使えば、複数のファイルで共通する内容を簡単に記述する事が出来ます。\n次のような感じですね。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\"># spec_helper.rb</span>\nRSpec<span class=\"token punctuation\">.</span>configure <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>config<span class=\"token operator\">|</span>\n  config<span class=\"token punctuation\">.</span><span class=\"token keyword\">include</span> ExampleGroupModuleName<span class=\"token punctuation\">,</span> <span class=\"token symbol\">type</span><span class=\"token operator\">:</span> <span class=\"token symbol\">:optional</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">example_group</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token symbol\">file_path</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Regexp</span><span class=\"token punctuation\">.</span>compile<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">%w[spec comment_extractor extractor .*.rb]</span></span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'[\\\\\\/]'</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">end</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-ruby\"><code class=\"language-ruby\">RSpec<span class=\"token punctuation\">.</span>configure <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>config<span class=\"token operator\">|</span>\n  config<span class=\"token punctuation\">.</span>add_setting <span class=\"token symbol\">:source_code_path</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">default</span><span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'spec/assets/source_code'</span></span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">module</span> <span class=\"token class-name\">ExampleGroupModuleName</span>\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">source_code_path</span></span><span class=\"token punctuation\">(</span>file_name <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span><span class=\"token punctuation\">)</span>\n    dir <span class=\"token operator\">=</span> RSpec<span class=\"token punctuation\">.</span>configuration<span class=\"token punctuation\">.</span>source_code_path\n    file_name <span class=\"token operator\">?</span> <span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span><span class=\"token content\">dir</span><span class=\"token delimiter punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span><span class=\"token content\">file_name</span><span class=\"token delimiter punctuation\">}</span></span><span class=\"token string\">\"</span></span> <span class=\"token operator\">:</span> dir\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">included</span></span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span>\n    k<span class=\"token punctuation\">.</span>class_eval <span class=\"token keyword\">do</span>\n      let<span class=\"token punctuation\">(</span><span class=\"token symbol\">:instance</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> described_class<span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>source_code<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n      let<span class=\"token punctuation\">(</span><span class=\"token symbol\">:source_code</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> source_code_path<span class=\"token punctuation\">(</span>file_name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n\n      describe <span class=\"token string-literal\"><span class=\"token string\">'.new'</span></span> <span class=\"token keyword\">do</span>\n        subject <span class=\"token punctuation\">{</span> instance <span class=\"token punctuation\">}</span>\n        let<span class=\"token punctuation\">(</span><span class=\"token symbol\">:file_name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token string-literal\"><span class=\"token string\">'filename.rb'</span></span> <span class=\"token punctuation\">}</span>\n        it <span class=\"token punctuation\">{</span> expect <span class=\"token punctuation\">{</span> subject <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span>to_not raise_error <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n</code></pre></div>\n<p>これを使えば、まとまったテストをスッキリ書く事ができますね。</p>\n<h2>まとめ</h2>\n<p>ざっくばらんに書きました。\nGemを作るのは簡単なので、みなさんも作ってみてください！</p>\n<p>では！</p>","rawContent":"\n先日から書き続けていた[CommentExtractor](https://github.com/alpaca-tc/comment_extractor)が、大枠完成しました。\n\n<img class=\"image_on_frame center\" src=\"/images/blog/i-have-almost-finished-implementing-comment-parser/capture.png\" alt=\"CommentExtractor\" />\n\nさて、今回Gemを書くときに役に立った、便利なTipsを幾つか紹介します！\n\n<!-- more -->\n\n内容はバラバラです。笑\n\n1. READMEに視覚情報を追加する\n2. RubyGemsからGemを削除する\n3. RSpecをキレイに書く\n\n## 1.READMEに視覚情報を追加する\n\nREADMEには視覚的なバッヂを追加出来ます。Gemを書くときには、ぜひとも入れておきたい情報ですね。\n\n- [![Gem Version](https://badge.fury.io/rb/comment_extractor.png)](https://badge.fury.io/rb/comment\\_extractor)\n- [![Build Status](https://travis-ci.org/alpaca-tc/comment_extractor.png?branch=v1.0.0)](https://travis-ci.org/alpaca-tc/comment\\_parser)\n- [![Coverage Status](https://coveralls.io/repos/alpaca-tc/comment_extractor/badge.png?branch=v1.0.0)](https://coveralls.io/r/alpaca-tc/comment\\_extractor?branch=v1.0.0)\n\nもちろん、登録すれば無料で作ることが出来ます。\n\n詳しくは[コチラの記事](https://elgalu.github.io/2013/add-achievement-badges-to-your-gem-readme/)を読んでみましょう。\n\n## 2.RubyGemsからGemを削除する\n\n間違えてRubyGemsにPushしてしまった！\n\nそんなときに便利なyankコマンド。意外と知られていない。\n\n```sh\ngem yank gem_name -v 1.0.0\n```\n\nただ、これをやっても論理削除されるだけのようですねぇ。多分。\n\nこのバージョン使うなよ！新しいの使えよ！ってときに使うコマンドだと思います。\n\n## 3.RSpecをキレイに書く\n\nRSpecをキレイに書く方法は、ある程度伝統があります。\n\n- [BetterSpecs](https://betterspecs.org/)\n- [Some RSpec Tips and Best Practices](https://bitfluxx.com/2011/05/23/some-rspec-tips-and-best-practices.html)\n\n今回は、ある程度RSpecを書ける人向けに、検索してもあまり出てこない情報(検索しにくい？)を提供したいと思います。\n\n### Syntaxについて\n\n#### be\\_truthy, be\\_falsy\n\nRSpecが新しくなって、`be_true`, `be_false`→`be_truthy`, `be_falsy`となりました。\n今までは、厳密に`true`で無くてもテストが通っちゃいましたからね。\n\n#### 現在の主題であるクラスを取得する\n\nRSpecでは`described_class`というメソッドを使用出来ます。\n`describe KlassName do...`で指定したKlassNameが格納されます。\n\nこれを使えば、クラス名に依存せずにテストを書く事ができますね。\n\n#### ExampleGroupを作る\n\nご存知の通り、Railsのテストではcontroller, model, viewで使えるメソッドが大きく異なります。\nそれは、RSpecのexample\\_groupという機能を使って、テストの種類を元にModuleをincludeしているからです。\n\nこれを使えば、複数のファイルで共通する内容を簡単に記述する事が出来ます。\n次のような感じですね。\n\n```ruby\n# spec_helper.rb\nRSpec.configure do |config|\n  config.include ExampleGroupModuleName, type: :optional, example_group: {\n    file_path: Regexp.compile(%w[spec comment_extractor extractor .*.rb].join('[\\\\\\/]'))\n  }\nend\n```\n\n```ruby\nRSpec.configure do |config|\n  config.add_setting :source_code_path, default: 'spec/assets/source_code'\nend\n\nmodule ExampleGroupModuleName\n  def source_code_path(file_name = nil)\n    dir = RSpec.configuration.source_code_path\n    file_name ? \"#{dir}/#{file_name}\" : dir\n  end\n\n  def self.included(k)\n    k.class_eval do\n      let(:instance) { described_class.new(source_code) }\n      let(:source_code) { source_code_path(file_name) }\n\n      describe '.new' do\n        subject { instance }\n        let(:file_name) { 'filename.rb' }\n        it { expect { subject }.to_not raise_error }\n      end\n    end\n  end\nend\n```\n\nこれを使えば、まとまったテストをスッキリ書く事ができますね。\n\n## まとめ\n\nざっくばらんに書きました。\nGemを作るのは簡単なので、みなさんも作ってみてください！\n\nでは！\n"},"prevPost":{"id":"2014-04-10-apiary","title":"APIのMockサーバーを構築する「Apiary」を使ってみる","date":"2014-04-10 21:36"},"nextPost":{"id":"2014-02-12-how-to-use-star","title":"ここまで出来る！RubyのSplat Operatorまとめ","date":"2014-02-12 04:16"}},"__N_SSG":true}