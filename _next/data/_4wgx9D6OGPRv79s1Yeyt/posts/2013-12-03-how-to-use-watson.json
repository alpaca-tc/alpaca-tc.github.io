{"pageProps":{"post":{"id":"2013-12-03-how-to-use-watson","title":"インラインTODO管理のWatsonを使う","date":"2013-12-03 23:49","content":"<p>最近、Githubのトレンドにも入っていた<a href=\"https://goosecode.com/watson/\">Watson</a>を紹介します。</p>\n<!-- more -->\n<img class=\"image_on_frame center\" src=\"/images/blog/watson.png\" alt=\"watsonのデモ\" />\n<h2>インラインTODO管理とは何か</h2>\n<p>もしあなたがエンジニアなら、次のようなコメントを見たことがあると思います。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ApplicationController</span> <span class=\"token operator\">&#x3C;</span> ActionController<span class=\"token double-colon punctuation\">::</span>Base\n  <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">logged_in</span></span><span class=\"token operator\">?</span>\n    <span class=\"token comment\"># TODO 管理ユーザーと処理を分ける</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n</code></pre></div>\n<p>このように、コード内には至る所にコメントが書かれています。\n単なるコードの説明に限らず、修正が必要な内容を記述したものも多くあります。</p>\n<p>しかしながら、しばしばこういったコメントは放置され、コードの中に埋もれたままになってしまうこともあります。</p>\n<p>Watsonは、コード内に書かれたコメントを走査し、近代的な管理ツールに流し込むことでIssueを管理するツールです。</p>\n<h2>どうやって使うのか</h2>\n<p>watsonを使って、コード内に記述されたコメントを洗い出して、GithubのIssueに登録してみましょう。</p>\n<h3>ステップ1: watsonのインストール</h3>\n<div class=\"remark-highlight\"><pre class=\"language-sh\"><code class=\"language-sh\">$ gem <span class=\"token function\">install</span> watson\n</code></pre></div>\n<h3>ステップ2: watsonの初期化</h3>\n<div class=\"remark-highlight\"><pre class=\"language-sh\"><code class=\"language-sh\">$ <span class=\"token builtin class-name\">cd</span> path/to/project_dir\n$ watson\n<span class=\"token comment\"># 一旦&#x3C;Ctrl-C>で終了してください。</span>\n</code></pre></div>\n<p><code>.watsonrc</code>が自動的に作成されるので、プロジェクトに合わせて走査するディレクトリなどを設定します。</p>\n<p>例として、Railsプロジェクト用の<a href=\"https://gist.github.com/7770689\">.watsonrc</a>を貼付けておきます。</p>\n<h3>ステップ3: watsonの実行！！</h3>\n<p>watsonを使うときは、独自のタグを使ってコメントを書いておきます。</p>\n<ul>\n<li><code>[todo] - タスクの内容を記入する</code></li>\n<li><code>[review] - 他の人に意見を求めるような内容を記入する</code></li>\n<li><code>[fix] - バグの内容を記入する</code></li>\n</ul>\n<p>試しに、適当なファイルを開いて、上記のようなフォーマットでコメントを記入してみてください。</p>\n<p>後は、再度<code>watson</code>と打って実行！</p>\n<p>めでたしめでたし。\nプロジェクト内のTODOなどが、一覧で出力されます。</p>\n<h3>ステップ4: githubへIssue登録する</h3>\n<p>先ほどの出力した内容を、Githubへ一括同期しましょう。</p>\n<p>まず、Githubのリポジトリをwatsonに認識させます</p>\n<div class=\"remark-highlight\"><pre class=\"language-sh\"><code class=\"language-sh\">$ watson <span class=\"token parameter variable\">--remote</span> github\n</code></pre></div>\n<p>英語のコメントに沿って、情報を入力していきましょう。</p>\n<p>続いて、Issueを登録します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-sh\"><code class=\"language-sh\">$ watson <span class=\"token parameter variable\">--update</span>\n</code></pre></div>\n<p>処理が終わると、Githubのissueへの登録が完了です。</p>\n<img src=\"image_on_frame center\" src=\"/images/blog/watson_issue_preview.png\" alt=\"githubのissueプレビュー\" />\n<h2>まとめ</h2>\n<p>watsonは先月ぐらいに注目され始めた新しいプロジェクトです。</p>\n<p>今後は、コメントを活用して様々な処理を行えるように拡張されると思うので、動向が楽しみですね。</p>\n<h3>watsonの現状</h3>\n<ul>\n<li>Ruby初心者の人が作ったため、コードがよろしくない(PR中)</li>\n<li>今のところ対応している管理ツールは、githubとbitbucket。</li>\n<li>安定版に必要な機能が未実装。なので、新機能のPRがなかなか取り入れられない状況。数ヶ月待たないといけなさそう。</li>\n<li>対応しているファイルタイプがまだ少ない</li>\n</ul>","rawContent":"\n最近、Githubのトレンドにも入っていた[Watson]( https://goosecode.com/watson/ )を紹介します。\n\n<!-- more -->\n\n<img class=\"image_on_frame center\" src=\"/images/blog/watson.png\" alt=\"watsonのデモ\" />\n\n## インラインTODO管理とは何か\n\nもしあなたがエンジニアなら、次のようなコメントを見たことがあると思います。\n\n```ruby\nclass ApplicationController < ActionController::Base\n  def logged_in?\n    # TODO 管理ユーザーと処理を分ける\n    ...\n  end\nend\n```\n\nこのように、コード内には至る所にコメントが書かれています。\n単なるコードの説明に限らず、修正が必要な内容を記述したものも多くあります。\n\nしかしながら、しばしばこういったコメントは放置され、コードの中に埋もれたままになってしまうこともあります。\n\nWatsonは、コード内に書かれたコメントを走査し、近代的な管理ツールに流し込むことでIssueを管理するツールです。\n\n## どうやって使うのか\n\nwatsonを使って、コード内に記述されたコメントを洗い出して、GithubのIssueに登録してみましょう。\n\n### ステップ1: watsonのインストール\n\n```sh\n$ gem install watson\n```\n\n### ステップ2: watsonの初期化\n\n```sh\n$ cd path/to/project_dir\n$ watson\n# 一旦<Ctrl-C>で終了してください。\n```\n\n`.watsonrc`が自動的に作成されるので、プロジェクトに合わせて走査するディレクトリなどを設定します。\n\n例として、Railsプロジェクト用の[.watsonrc](https://gist.github.com/7770689)を貼付けておきます。\n\n### ステップ3: watsonの実行！！\n\nwatsonを使うときは、独自のタグを使ってコメントを書いておきます。\n\n- `[todo] - タスクの内容を記入する`\n- `[review] - 他の人に意見を求めるような内容を記入する`\n- `[fix] - バグの内容を記入する`\n\n試しに、適当なファイルを開いて、上記のようなフォーマットでコメントを記入してみてください。\n\n後は、再度`watson`と打って実行！\n\nめでたしめでたし。\nプロジェクト内のTODOなどが、一覧で出力されます。\n\n### ステップ4: githubへIssue登録する\n\n先ほどの出力した内容を、Githubへ一括同期しましょう。\n\nまず、Githubのリポジトリをwatsonに認識させます\n\n```sh\n$ watson --remote github\n```\n\n英語のコメントに沿って、情報を入力していきましょう。\n\n\n続いて、Issueを登録します。\n\n```sh\n$ watson --update\n```\n\n処理が終わると、Githubのissueへの登録が完了です。\n\n<img src=\"image_on_frame center\" src=\"/images/blog/watson_issue_preview.png\" alt=\"githubのissueプレビュー\" />\n\n## まとめ\n\nwatsonは先月ぐらいに注目され始めた新しいプロジェクトです。\n\n今後は、コメントを活用して様々な処理を行えるように拡張されると思うので、動向が楽しみですね。\n\n### watsonの現状\n\n- Ruby初心者の人が作ったため、コードがよろしくない(PR中)\n- 今のところ対応している管理ツールは、githubとbitbucket。\n- 安定版に必要な機能が未実装。なので、新機能のPRがなかなか取り入れられない状況。数ヶ月待たないといけなさそう。\n- 対応しているファイルタイプがまだ少ない\n"},"prevPost":{"id":"2013-12-09-neocomplete-vs-youcompleteme","title":"NeoComplete vs YouCompleteMe","date":"2013-12-10 00:04"},"nextPost":{"id":"2013-11-23-the-story-about-guard-shell","title":"Guard-shellが便利だった話","date":"2013-11-23 01:34"}},"__N_SSG":true}